const { validateEnvironment } = require('./validate-env');
const { healthCheck } = require('./health-check');
const { execSync } = require('child_process');

async function preDeploy() {
    console.log('üöÄ Starting pre-deployment checks...\n');

    try {
        // 1. Environment validation
        console.log('1Ô∏è‚É£ Validating environment variables...');
        validateEnvironment();
        console.log('‚úÖ Environment validation passed\n');

        // 2. Type checking
        console.log('2Ô∏è‚É£ Running TypeScript checks...');
        execSync('npm run type-check', { stdio: 'inherit' });
        console.log('‚úÖ TypeScript checks passed\n');

        // 3. Linting
        console.log('3Ô∏è‚É£ Running linting...');
        execSync('npm run lint', { stdio: 'inherit' });
        console.log('‚úÖ Linting passed\n');

        // 4. Security audit
        console.log('4Ô∏è‚É£ Running security audit...');
        try {
            execSync('npm audit --audit-level high', { stdio: 'inherit' });
            console.log('‚úÖ Security audit passed\n');
        } catch (error) {
            console.warn('‚ö†Ô∏è  Security audit found issues. Please review.\n');
        }

        // 5. Build
        console.log('5Ô∏è‚É£ Building application...');
        execSync('npm run build', { stdio: 'inherit' });
        console.log('‚úÖ Build successful\n');

        // 6. Tests (if available)
        try {
            console.log('6Ô∏è‚É£ Running tests...');
            execSync('npm run test:ci', { stdio: 'inherit' });
            console.log('‚úÖ Tests passed\n');
        } catch (error) {
            console.log('‚ÑπÔ∏è  No tests found or tests failed\n');
        }

        console.log('üéâ All pre-deployment checks passed!');
        console.log('Ready for deployment üöÄ');

    } catch (error) {
        console.error('‚ùå Pre-deployment checks failed:', error.message);
        process.exit(1);
    }
}

// Run if called directly
if (require.main === module) {
    preDeploy();
}

module.exports = { preDeploy };
