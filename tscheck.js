// tscheck.js
const { exec } = require('child_process');
const path = require('path');
const fs = require('fs');

// L·∫•y tham s·ªë d√≤ng l·ªánh
const args = process.argv.slice(2);
const isWatch = args.includes('--watch');
const isVerbose = args.includes('--verbose');
const includesLint = args.includes('--lint');

// C√°c th∆∞ m·ª•c c·∫ßn ki·ªÉm tra
const directoriesToCheck = [
    'app',
    'common',
    'contexts',
    'components',
    'helper',
    'hooks',
    'utils',
    'lib',
    'redux',
    'screens',
    'services',
    'apis',
    'actions',
    'schemas',
    'types',
    'config',
    'constants',
];

// T√¨m c√°c th∆∞ m·ª•c t·ªìn t·∫°i
const existingDirectories = directoriesToCheck.filter(dir => {
    try {
        return fs.statSync(path.join(process.cwd(), dir)).isDirectory();
    } catch (e) {
        return false;
    }
});

if (existingDirectories.length === 0) {
    console.error('\x1b[31m%s\x1b[0m', 'Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c m√£ ngu·ªìn n√†o ƒë·ªÉ ki·ªÉm tra.');
    process.exit(1);
}

console.log('\x1b[36m%s\x1b[0m', 'üìÇ ƒêang ki·ªÉm tra c√°c th∆∞ m·ª•c:', existingDirectories.join(', '));

// X√¢y d·ª±ng l·ªánh tsc ƒë·ªÉ ki·ªÉm tra m√£ ngu·ªìn
const watchFlag = isWatch ? '--watch' : '';
const tscCheckCommand = `npx tsc --noEmit --pretty ${watchFlag} --project tsconfig.json`;

console.log('\x1b[36m%s\x1b[0m', `üîç ƒêang ch·∫°y TypeScript check: ${tscCheckCommand}`);

// H√†m ki·ªÉm tra ESLint
const runEslintCheck = () => {
    if (!includesLint) return Promise.resolve();

    return new Promise((resolve, reject) => {
        console.log('\x1b[36m%s\x1b[0m', 'üîç ƒêang ch·∫°y ESLint check...');

        const eslintCommand = 'npx eslint . --ext .ts,.tsx';
        exec(eslintCommand, (error, stdout, stderr) => {
            if (stdout && isVerbose) {
                console.log(stdout);
            }

            if (stderr) {
                console.error('\x1b[31m%s\x1b[0m', stderr);
            }

            if (error) {
                console.error('\x1b[31m%s\x1b[0m', '‚ùå Ki·ªÉm tra ESLint th·∫•t b·∫°i!');
                reject(error);
            } else {
                console.log('\x1b[32m%s\x1b[0m', '‚úÖ Ki·ªÉm tra ESLint th√†nh c√¥ng!');
                resolve();
            }
        });
    });
};

// H√†m ki·ªÉm tra TypeScript
const runTypeScriptCheck = () => {
    return new Promise((resolve, reject) => {
        exec(tscCheckCommand, (error, stdout, stderr) => {
            if (stdout && (isVerbose || error)) {
                console.log(stdout);
            }

            if (stderr) {
                console.error('\x1b[31m%s\x1b[0m', stderr);
            }

            if (error) {
                console.error('\x1b[31m%s\x1b[0m', '‚ùå Ki·ªÉm tra TypeScript th·∫•t b·∫°i!');

                // Ph√¢n t√≠ch l·ªói TypeScript ƒë·ªÉ hi·ªÉn th·ªã t√≥m t·∫Øt
                const errorMatch = stdout.match(/Found (\d+) error/);
                if (errorMatch && errorMatch[1]) {
                    console.error('\x1b[31m%s\x1b[0m', `T√¨m th·∫•y ${errorMatch[1]} l·ªói TypeScript.`);
                }

                reject(error);
            } else {
                console.log('\x1b[32m%s\x1b[0m', '‚úÖ Ki·ªÉm tra TypeScript th√†nh c√¥ng! Kh√¥ng t√¨m th·∫•y l·ªói n√†o.');
                resolve();
            }
        });
    });
};

// N·∫øu ·ªü ch·∫ø ƒë·ªô watch, ch·ªâ ch·∫°y TypeScript check
if (isWatch) {
    runTypeScriptCheck().catch(() => {
        // Trong ch·∫ø ƒë·ªô watch, kh√¥ng tho√°t v·ªõi l·ªói v√¨ TypeScript s·∫Ω ti·∫øp t·ª•c theo d√µi
        console.log('\x1b[33m%s\x1b[0m', 'ƒêang theo d√µi c√°c thay ƒë·ªïi file...');
    });
} else {
    // Ch·∫°y c·∫£ hai ki·ªÉm tra n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    Promise.all([
        runTypeScriptCheck(),
        includesLint ? runEslintCheck() : Promise.resolve()
    ])
        .then(() => {
            console.log('\x1b[32m%s\x1b[0m', '‚ú® T·∫•t c·∫£ ki·ªÉm tra ƒë√£ ho√†n t·∫•t th√†nh c√¥ng!');
        })
        .catch(() => {
            console.error('\x1b[31m%s\x1b[0m', '‚ùå M·ªôt ho·∫∑c nhi·ªÅu ki·ªÉm tra th·∫•t b·∫°i.');
            process.exit(1);
        });
}


// // tscheck.js
// const { exec } = require('child_process');
// const path = require('path');
// const fs = require('fs');

// // C√°c th∆∞ m·ª•c c·∫ßn ki·ªÉm tra
// const directoriesToCheck = [
//     'app',
//     'common',
//     'context',
//     'components',
//     'helper',
//     'utils',
//     'lib',
//     'hooks',
//     'redux',
//     'screens',
//     'services',
//     'apis',
//     'actions',
//     'schemas',
//     'types',
//     'config',
//     'constants',
// ];

// // T√¨m c√°c th∆∞ m·ª•c t·ªìn t·∫°i
// const existingDirectories = directoriesToCheck.filter(dir => {
//     try {
//         return fs.statSync(path.join(process.cwd(), dir)).isDirectory();
//     } catch (e) {
//         return false;
//     }
// });

// if (existingDirectories.length === 0) {
//     console.error('Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c m√£ ngu·ªìn n√†o ƒë·ªÉ ki·ªÉm tra.');
//     process.exit(1);
// }

// console.log('ƒêang ki·ªÉm tra l·ªói TypeScript trong c√°c th∆∞ m·ª•c:', existingDirectories.join(', '));

// // X√¢y d·ª±ng l·ªánh tsc ƒë·ªÉ ki·ªÉm tra m√£ ngu·ªìn
// const tscCheckCommand = `npx tsc --noEmit --pretty --project tsconfig.json`;

// console.log(`ƒêang ch·∫°y: ${tscCheckCommand}`);

// // Th·ª±c thi l·ªánh ki·ªÉm tra
// exec(tscCheckCommand, (error, stdout, stderr) => {
//     if (stdout) {
//         console.log(stdout);
//     }

//     if (stderr) {
//         console.error(stderr);
//     }

//     if (error) {
//         console.error('Ki·ªÉm tra TypeScript th·∫•t b·∫°i v·ªõi l·ªói:');
//         process.exit(1);
//     } else {
//         console.log('‚úÖ Ki·ªÉm tra TypeScript th√†nh c√¥ng! Kh√¥ng t√¨m th·∫•y l·ªói n√†o.');
//     }
// });