/**
 * Helper function to generate unique IDs with optional prefixes
 */
let counter = 0;

/**
 * Generates a unique ID with optional prefix
 * @param prefix Optional string prefix for the ID
 * @returns A unique string ID
 */
export function generateUniqueId(prefix = 'id'): string {
  counter += 1;
  return `${prefix}-${counter}-${Date.now().toString(36)}`;
}

/**
 * Creates a function that generates unique IDs with a consistent prefix
 * @param prefix The prefix to use for all IDs generated by this function
 * @returns A function that generates unique IDs
 */
export function createUniqueIdGenerator(prefix = 'id') {
  return () => generateUniqueId(prefix);
}

/**
 * Ensures that a value is defined and unique by providing a fallback ID if needed
 * @param value The original value to use if defined
 * @param prefix Optional prefix for the generated ID if value is undefined
 * @returns The original value if defined, or a unique ID if undefined
 */
export function ensureUniqueValue(value: string | undefined, prefix = 'fallback'): string {
  if (value !== undefined && value !== null && value !== '') {
    return value;
  }
  return generateUniqueId(prefix);
}

export default generateUniqueId;
